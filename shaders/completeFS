#version 330 core
out vec4 FragColor;

in vec3 Normal;
in vec2 texCoord;
in vec3 currentPos;
in mat3 TBN;

uniform vec3 lightPos;
uniform vec3 cameraPos;
uniform bool activateNormalMap;
uniform bool hasNormalMap;

uniform sampler2D Texture;
uniform sampler2D NormalMap;

void main()
{
    vec3 normal = Normal;
    if (hasNormalMap && activateNormalMap ) {
        normal = texture(NormalMap, texCoord).rgb;
        normal = normal * 2 - 1;
        normal = normalize(TBN * normal);
    }
    
    vec3 Color = texture(Texture, texCoord).rgb;

    float ambiant = 0.2f;
    vec3 lightDirection = normalize(lightPos - currentPos);
    float diffuse = max(dot(normal, lightDirection), 0.0f);

    float specularLight = 0.5f;
    vec3 viewDirection = normalize(cameraPos - currentPos);
    vec3 reflectionDirection = reflect(-lightDirection, normal);
    float specAmmunt = pow(max(dot(viewDirection, reflectionDirection), 0.0f), 16);
    float specular = specAmmunt * specularLight;

    FragColor = vec4(Color * (diffuse + ambiant + specular), 1.0f);
}